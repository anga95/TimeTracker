@using System.Security.Claims
@using TimeTracker.Models
@using TimeTracker.Services
@inject IJSRuntime JSRuntime
@inject ITimeTrackingService TimeService
@inject AuthenticationStateProvider AuthProvider

<div class="input-group">
  <select class="form-select"
          value="@SelectedProjectId"
          @onchange="OnSelectionChanged">
    <option value="0">-- Välj projekt --</option>
    @foreach (var p in Projects)
    {
      <option value="@p.Id">@p.Name</option>
    }
  </select>

  <button class="btn btn-outline-secondary"
          type="button"
          @onclick="() => _showModal = true">
    <i class="bi bi-plus-circle"></i>
  </button>

  <button class="btn btn-outline-danger"
          type="button"
          disabled="@(SelectedProjectId == 0)"
          @onclick="DeleteProjectWithConfirmation">
    <i class="bi bi-trash"></i>
  </button>
</div>

@if (_showModal)
{
  <div class="modal fade show" style="display:block;">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Skapa nytt projekt</h5>
          <button type="button" class="btn-close"
                  @onclick="CloseModal"></button>
        </div>
        <div class="modal-body">
          <InputText @bind-Value="_newProjectName"
                     class="form-control"
                     placeholder="Projektnamn"/>
        </div>
        <div class="modal-footer">
          <button class="btn btn-secondary"
                  @onclick="CloseModal">Avbryt
          </button>
          <button class="btn btn-primary"
                  @onclick="CreateProject">Lägg till
          </button>
        </div>
      </div>
    </div>
  </div>
  <div class="modal-backdrop fade show"></div>
}

@code {
  [Parameter] public List<Project> Projects { get; set; } = new();

  [Parameter] public int SelectedProjectId { get; set; }
  [Parameter] public EventCallback<int> SelectedProjectIdChanged { get; set; }

  [Parameter] public EventCallback OnProjectChanged { get; set; }


  private bool _showModal;
  private string _newProjectName = string.Empty;
  private string _currentUserId = string.Empty;

  protected override async Task OnInitializedAsync()
  {
    var authState = await AuthProvider.GetAuthenticationStateAsync();
    _currentUserId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "";
  }


  async Task CreateProject()
  {
    if (string.IsNullOrWhiteSpace(_newProjectName))
      return;

    try
    {
      await TimeService.CreateProjectAsync(_newProjectName, _currentUserId);
      await OnProjectChanged.InvokeAsync();

      CloseModal();
    }
    catch (Exception ex)
    {
      await JSRuntime.InvokeVoidAsync("alert", $"Fel vid skapande av projekt: {ex.Message}");
    }
  }

  void CloseModal()
  {
    _showModal = false;
    _newProjectName = "";
  }

  async Task DeleteProjectWithConfirmation()
  {
    if (SelectedProjectId == 0)
      return;

    if (await JSRuntime.InvokeAsync<bool>("confirm", "Radera projektet?"))
    {
      try
      {
        await TimeService.DeleteProjectAsync(SelectedProjectId);
        await SelectedProjectIdChanged.InvokeAsync(0);
        await OnProjectChanged.InvokeAsync();
      }
      catch (Exception ex)
      {
        await JSRuntime.InvokeVoidAsync("alert", $"Fel vid radering av projekt: {ex.Message}");
      }
    }
  }

  private async Task OnSelectionChanged(ChangeEventArgs e)
  {
    if (int.TryParse(e.Value?.ToString(), out int newValue))
    {
      SelectedProjectId = newValue;
      await SelectedProjectIdChanged.InvokeAsync(newValue);
    }
  }

}