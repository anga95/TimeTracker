@namespace TimeTracker.Components
@inject ProjectSelectorViewModel ViewModel
@using System.Reflection
@using TimeTracker.Models
@using TimeTracker.ViewModels
@implements IDisposable

<div class="input-group">
  <select class="form-select"
          value="@ViewModel.SelectedProjectId"
          @onchange="ViewModel.OnSelectionChanged">
    <option value="0">-- Välj projekt --</option>
    @foreach (var p in ViewModel.Projects)
    {
      <option value="@p.Id">@p.Name</option>
    }
  </select>

  <button class="btn btn-outline-secondary"
          type="button"
          @onclick="ViewModel.OpenModal">
    <i class="bi bi-plus-circle"></i>
  </button>

  <button class="btn btn-outline-danger"
          type="button"
          disabled="@(ViewModel.SelectedProjectId == 0)"
          @onclick="ViewModel.DeleteProjectWithConfirmation">
    <i class="bi bi-trash"></i>
  </button>
</div>

@if (ViewModel.ShowModal)
{
  <div class="modal fade show" style="display:block;">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Skapa nytt projekt</h5>
          <button type="button" class="btn-close"
                  @onclick="ViewModel.CloseModal"></button>
        </div>
        <div class="modal-body">
          <InputText @bind-Value="ViewModel.NewProjectName"
                     class="form-control"
                     placeholder="Projektnamn"/>
        </div>
        <div class="modal-footer">
          <button class="btn btn-secondary"
                  @onclick="ViewModel.CloseModal">Avbryt
          </button>
          <button class="btn btn-primary"
                  @onclick="ViewModel.CreateProject">Lägg till
          </button>
        </div>
      </div>
    </div>
  </div>
  <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public List<Project> Projects { get; set; } = new();
    [Parameter] public int SelectedProjectId { get; set; }
    [Parameter] public EventCallback<int> SelectedProjectIdChanged { get; set; }
    [Parameter] public EventCallback OnProjectChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.InitializeAsync();
        ViewModel.StateChanged += StateHasChanged;
    
        ViewModel.SelectedProjectIdChanged += async value => await SelectedProjectIdChanged.InvokeAsync(value);
        ViewModel.ProjectChanged += async () => await OnProjectChanged.InvokeAsync();
    }
    
    protected override void OnParametersSet()
    {
        ViewModel.Projects = Projects;
        ViewModel.SelectedProjectId = SelectedProjectId;
    }
    
    public void Dispose()
    {
        ViewModel.StateChanged -= StateHasChanged;
        
        var type = ViewModel.GetType();
        var events = type.GetEvents();
        
        foreach (var eventInfo in events)
        {
            var field = type.GetField(eventInfo.Name, 
                BindingFlags.NonPublic | 
                BindingFlags.Instance);
            
            if (field != null)
            {
                field.SetValue(ViewModel, null);
            }
        }
    }
}