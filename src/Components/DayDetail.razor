@namespace TimeTracker.Components
@inject DayDetailViewModel ViewModel
@using System.Reflection
@using TimeTracker.Models
@using TimeTracker.ViewModels
@implements IDisposable

@if (ViewModel.EditContext != null)
{
    <EditForm EditContext="ViewModel.EditContext" OnValidSubmit="ViewModel.HandleValidSubmit">
        <DataAnnotationsValidator/>
        <ValidationSummary class="text-danger mb-3"/>

        <div class="row gy-2 gx-4 align-items-end">
            <div class="col-md-4">
                <label>Projekt</label>
                <ProjectSelector
                    Projects="ViewModel.Projects ?? new List<Project>()"
                    @bind-SelectedProjectId="ViewModel.TimeEntry.ProjectId"
                    OnProjectChanged="ViewModel.HandleProjectsChanged"/>
            </div>
            
            <div class="col-md-2">
                <label>Ticket</label>
                <InputText @bind-Value="ViewModel.TimeEntry.TicketKey"
                           class="form-control"
                           placeholder="ABC-123"
                           disabled="@(!ViewModel.IsAuthenticated)"/>
            </div>
        <div class="col-md-3">
            <label>Ticket URL</label>
            <InputText @bind-Value="ViewModel.TimeEntry.TicketUrl"
                       class="form-control"
                       placeholder="https://jira.example.com/browse/ABC-123"
                       disabled="@(!ViewModel.IsAuthenticated)"/>
        </div>
        
            <!-- Force line break on md+ -->
            <div class="w-100 d-none d-md-block p-0 m-0"></div>
                
                <div class="col-md-2 pt-md-0">
                    <label>Timmar</label>
                    <InputNumber @bind-Value="ViewModel.TimeEntry.HoursWorked"
                                 class="form-control"
                                 disabled="@(!ViewModel.IsAuthenticated)"/>
                </div>

                <div class="col-md-4 pt-md-0">
                    <label>Kommentar</label>
                    <InputTextArea @bind-Value="ViewModel.TimeEntry.Comment"
                                   rows="1"
                                   class="form-control"
                                   disabled="@(!ViewModel.IsAuthenticated)"/>
                </div>

                <div class="col-md-2 text-end pt-md-0">
                    <button type="submit"
                            class="btn btn-primary"
                            disabled="@(!ViewModel.IsAuthenticated)">
                        Lägg till
                    </button>
                </div>
            </div>
    </EditForm>
}

<hr/>

@if (ViewModel.Items?.Any() ?? false)
{
    <div class="table-responsive">
        <table class="table">
            <thead class="table-light">
            <tr>
                <th>Projekt</th>
                <th>Ticket</th>
                <th>Timmar</th>
                <th>Kommentar</th>
                <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var item in ViewModel.Items)
            {
                <tr>
                    <td>@item.Project?.Name</td>
                    <td>
                        @if (!string.IsNullOrWhiteSpace(item.TicketUrl) && !string.IsNullOrWhiteSpace(item.TicketKey))
                        {
                            <a href="@item.TicketUrl" target="_blank" rel="noopener noreferrer">@item.TicketKey</a>
                        }
                        else
                        {
                            @item.TicketKey
                        }
                    </td>
                    <td>@item.HoursWorked</td>
                    <td>@item.Comment</td>
                    <td class="text-end">
                        <button class="btn btn-outline-danger btn-sm"
                                @onclick="() => ViewModel.DeleteTimeEntry(item.Id)"
                                disabled="@(!ViewModel.IsAuthenticated)">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}
else
{
    <p>Inga tids­poster för denna dag.</p>
}

@code {
    [Parameter] public DateTime Day { get; set; }
    [Parameter] public List<TimeEntry>? Items { get; set; }
    [Parameter] public List<Project>? Projects { get; set; }
    [Parameter] public bool IsAuthenticated { get; set; }
    [Parameter] public string CurrentUserId { get; set; } = "";

    [Parameter] public TimeEntry TimeEntry { get; set; } = new TimeEntry();
    [Parameter] public EventCallback<TimeEntry> TimeEntryChanged { get; set; }

    [Parameter] public EventCallback<List<TimeEntry>> OnItemsChanged { get; set; }
    [Parameter] public EventCallback<int> OnRefreshRequested { get; set; }

    protected override void OnInitialized()
    {
        ViewModel.Initialize();
        ViewModel.StateChanged += StateHasChanged;
        
        ViewModel.TimeEntryChanged += entry => TimeEntryChanged.InvokeAsync(entry);
        ViewModel.ItemsChanged += items => OnItemsChanged.InvokeAsync(items);
        ViewModel.RefreshRequested += id => OnRefreshRequested.InvokeAsync(id);
    }

    protected override void OnParametersSet()
    {
        ViewModel.Day = Day;
        ViewModel.Items = Items ?? new List<TimeEntry>();
        ViewModel.Projects = Projects ?? new List<Project>();
        ViewModel.IsAuthenticated = IsAuthenticated;
        ViewModel.CurrentUserId = CurrentUserId;
        ViewModel.TimeEntry = TimeEntry; // Detta triggar en property-setter som skapar en ny EditContext
        
        ViewModel.SetParameters();
    }

    public void Dispose()
    {
        ViewModel.StateChanged -= StateHasChanged;
        
        var type = ViewModel.GetType();
        var events = type.GetEvents();
        
        foreach (var eventInfo in events)
        {
            var field = type.GetField(eventInfo.Name, 
                BindingFlags.NonPublic | 
                BindingFlags.Instance);
            
            if (field != null)
            {
                field.SetValue(ViewModel, null);
            }
        }
    }
}