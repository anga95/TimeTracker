@using TimeTracker.Models
@using TimeTracker.Services
@inject ITimeTrackingService TimeService
@inject IJSRuntime JSRuntime

@if (_editContext != null)
{
    <EditForm EditContext="_editContext" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator/>
        <ValidationSummary class="text-danger mb-3"/>

        <div class="row gy-3 gx-4 align-items-end">
            <div class="col-md-4">
                <label>Projekt</label>
                <ProjectSelector
                    Projects="Projects ?? new List<Project>()"
                    @bind-SelectedProjectId="TimeEntry.ProjectId"
                    OnProjectChanged="HandleProjectsChanged"/>
                <ValidationMessage For="@(() => TimeEntry.ProjectId)"/>
            </div>

            <div class="col-md-2">
                <label>Timmar</label>
                <InputNumber @bind-Value="TimeEntry.HoursWorked"
                             class="form-control"
                             disabled="@(!IsAuthenticated)"/>
                <ValidationMessage For="@(() => TimeEntry.HoursWorked)"/>
            </div>

            <div class="col-md-4">
                <label>Kommentar</label>
                <InputTextArea @bind-Value="TimeEntry.Comment"
                               rows="1"
                               class="form-control"
                               disabled="@(!IsAuthenticated)"/>
            </div>

            <div class="col-md-2 text-end">
                <button type="submit"
                        class="btn btn-primary"
                        disabled="@(!IsAuthenticated)">
                    Lägg till
                </button>
            </div>
        </div>
    </EditForm>
}

<hr/>

@if (Items?.Any() ?? false)
{
    <div class="table-responsive">
        <table class="table">
            <thead class="table-light">
            <tr>
                <th>Projekt</th>
                <th>Timmar</th>
                <th>Kommentar</th>
                <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var item in Items)
            {
                <tr>
                    <td>@item.Project?.Name</td>
                    <td>@item.HoursWorked</td>
                    <td>@item.Comment</td>
                    <td class="text-end">
                        <button class="btn btn-outline-danger btn-sm"
                                @onclick="() => DeleteTimeEntry(item.Id)"
                                disabled="@(!IsAuthenticated)">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}
else
{
    <p>Inga tids­poster för denna dag.</p>
}

@code {
    private EditContext? _editContext;

    [Parameter] public DateTime Day { get; set; }
    [Parameter] public List<TimeEntry>? Items { get; set; }
    [Parameter] public List<Project>? Projects { get; set; }
    [Parameter] public bool IsAuthenticated { get; set; }
    [Parameter] public string CurrentUserId { get; set; } = "";

    [Parameter] public TimeEntry TimeEntry { get; set; } = new TimeEntry();
    [Parameter] public EventCallback<TimeEntry> TimeEntryChanged { get; set; }

    [Parameter] public EventCallback<List<TimeEntry>> OnItemsChanged { get; set; }
    [Parameter] public EventCallback<int> OnRefreshRequested { get; set; }

    protected override void OnInitialized()
    {
        _editContext = new EditContext(TimeEntry);
    }

    protected override void OnParametersSet()
    {
        TimeEntry.WorkDate = Day;
        
        if (_editContext == null || _editContext.Model != TimeEntry)
        {
            _editContext = new EditContext(TimeEntry);
        }
    }

    private async Task HandleValidSubmit()
    {
        if (TimeEntry.ProjectId == 0) return;

        var timeEntryToSubmit = new TimeEntry
        {
            WorkDate = TimeEntry.WorkDate,
            ProjectId = TimeEntry.ProjectId,
            HoursWorked = TimeEntry.HoursWorked,
            Comment = TimeEntry.Comment
        };

        await AddTimeEntry(timeEntryToSubmit);
    }
    
    private void ResetForm()
    {
        TimeEntry.ProjectId = 0;
        TimeEntry.HoursWorked = 0;
        TimeEntry.Comment = null;
        TimeEntryChanged.InvokeAsync(TimeEntry);
    }


    private async Task AddTimeEntry(TimeEntry timeEntry)
    {
        if (timeEntry.ProjectId == 0) return;

        try
        {
            await TimeService.AddTimeEntryAsync(timeEntry, CurrentUserId);
            await OnRefreshRequested.InvokeAsync(0);

            ResetForm();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Fel vid registrering av tid: {ex.Message}");
        }
    }

    private async Task DeleteTimeEntry(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Är du säker?"))
        {
            try
            {
                await TimeService.DeleteTimeEntryAsync(id);
                await OnRefreshRequested.InvokeAsync(0);
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Fel vid radering: {ex.Message}");
            }
        }
    }

    private async Task HandleProjectsChanged()
    {
        Projects = await TimeService.GetProjectsAsync(CurrentUserId);
        StateHasChanged();
    }

}