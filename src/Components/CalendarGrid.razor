@using System.Security.Claims
@using TimeTracker.Models
@using TimeTracker.Services
@namespace TimeTracker.Components
@inject ITimeTrackingService TimeService
@inject AuthenticationStateProvider AuthProvider

<MonthNavigation 
    Year="Year" 
    Month="Month" 
    OnNavigate="HandleMonthNavigation" />

<div class="row text-center fw-bold">
  @foreach (var h in WeekdayHeaders)
  {
    <div class="col border">@h</div>
  }
</div>

@if (_isLoading)
{
  <div class="position-absolute top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center" 
       style="background-color: rgba(255, 255, 255, 0.7); z-index: 1000;">
    <div class="spinner-border text-primary" role="status">
      <span class="visually-hidden">Laddar...</span>
    </div>
  </div>
}

else
{
  @for (int r = 0; r < _totalRows; r++)
  {
    <div class="row">
      @for (int c = 0; c < 7; c++)
      {
        var day = _gridStart.AddDays(r * 7 + c);
        bool inMonth = day.Month == Month;
        var totalHours = CalculateTotalHours(day);
        bool isToday = day.Date == DateTime.Today;
        bool isSelected = day.Date == SelectedDay.Date;

        // build CSS classes dynamically
        var classes = new List<string> { "col", "border", "p-2", "text-start" };
        if (!inMonth) classes.Add("bg-light");
        else if (isToday) classes.Add("bg-info bg-opacity-25");
        else if (totalHours > 0) classes.Add("bg-success bg-opacity-10");
        if (isSelected)
        {
          classes.Add("border-2");
          classes.Add("border-dark");
        }

        <div class="@string.Join(" ", classes)"
             style="cursor:pointer; height:120px; overflow:hidden;"
             @onclick="() => HandleDayClick(day)">
          <div><strong class="@(isToday ? "text-info" : "")">@day.Day</strong></div>
          @if (totalHours > 0)
          {
            <div><strong>@totalHours h</strong></div>
            <ul class="list-unstyled small mb-0" style="line-height:1.1;">
              @foreach (var (proj, hrs) in CalculateProjectSummary(day).Take(3))
              {
                <li>@proj: @hrs h</li>
              }
              @if (CalculateProjectSummary(day).Count() > 3)
              {
                <li>…</li>
              }
            </ul>
          }
        </div>
      }
    </div>
  }
}

@code {
  [Parameter] public int Year { get; set; }
  [Parameter] public int Month { get; set; }
  [Parameter] public DateTime SelectedDay { get; set; }
  [Parameter] public EventCallback<DateTime> SelectedDayChanged { get; set; }
  [Parameter] public EventCallback<List<WorkDay>> OnMonthDataLoaded { get; set; }
  [Parameter] public EventCallback<(int Year, int Month)> OnMonthChanged { get; set; }
  [Parameter] public EventCallback<DateTime> OnDaySelected { get; set; }


  private List<WorkDay> _monthWorkDays = new();
  private DateTime _gridStart;
  private int _totalRows;
  private string _currentUserId = "";
  private bool _isLoading = false;
  private bool _initialized = false;  // Ny flagga för att förhindra dubbel laddning


  private string[] WeekdayHeaders => new[] { "Mån", "Tis", "Ons", "Tors", "Fre", "Lör", "Sön" };

  protected override async Task OnInitializedAsync()
  {
    var authState = await AuthProvider.GetAuthenticationStateAsync();
    _currentUserId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "";
  }

  protected override async Task OnParametersSetAsync()
  {
    // Kontrollera om vi är klara med initialisering
    if (!_initialized)
    {
      _initialized = true;
      CalculateCalendarGridParameters(Year, Month);
      await LoadMonthDataAsync();
      return;
    }

    // Om parametrarna har ändrats, ladda om data
    if (Year > 0 && Month > 0 && 
        (Year != _lastLoadedYear || Month != _lastLoadedMonth))
    {
      CalculateCalendarGridParameters(Year, Month);
      await LoadMonthDataAsync();
    }
  }

  private int _lastLoadedYear;
  private int _lastLoadedMonth;

  private async Task HandleMonthNavigation((int Year, int Month) newDate)
  {
    await OnMonthChanged.InvokeAsync(newDate);
  }

  private async Task LoadMonthDataAsync()
  {
    // Om vi redan håller på att ladda, avbryt
    if (_isLoading) return;

    _isLoading = true;
    StateHasChanged();

    try
    {
      // Spara vad vi laddar så vi inte laddar samma period igen
      _lastLoadedYear = Year;
      _lastLoadedMonth = Month;

      // Use the new method that only gets data for the current month
      _monthWorkDays = await TimeService.GetWorkDaysForMonthAsync(_currentUserId, Year, Month);
      
      await OnMonthDataLoaded.InvokeAsync(_monthWorkDays);
    }
    finally
    {
      _isLoading = false;
      StateHasChanged();
    }
  }
  
  private void CalculateCalendarGridParameters(int year, int month)
  {
    DateTime firstDayOfMonth = new DateTime(year, month, 1);
    
    // Get day of week (0-6, where 0 is Sunday)
    int dayOfWeekIndex = (int)firstDayOfMonth.DayOfWeek;
    
    // Convert to European convention where Monday is the first day of the week
    // In this convention: Monday=1, Tuesday=2, ..., Sunday=7
    if (dayOfWeekIndex == 0)
      dayOfWeekIndex = 7;
    
    int daysToFirstMonday = dayOfWeekIndex - 1;
    
    // Set grid start date to the Monday at or before the first of the month
    _gridStart = firstDayOfMonth.AddDays(-daysToFirstMonday);
    
    // Calculate how many rows we need to display the entire month
    int daysInMonth = DateTime.DaysInMonth(year, month);
    int totalCellsNeeded = daysToFirstMonday + daysInMonth;
    _totalRows = (int)Math.Ceiling(totalCellsNeeded / 7.0);
  }


  private async Task HandleDayClick(DateTime day)
  {
    SelectedDay = day;
    await SelectedDayChanged.InvokeAsync(day);
    await OnDaySelected.InvokeAsync(day);
  }

  private double CalculateTotalHours(DateTime date) =>
    _monthWorkDays.FirstOrDefault(w => w.Date.Date == date.Date)?.TimeEntries.Sum(i => i.HoursWorked) ?? 0;

  private IEnumerable<(string projectName, double hours)> CalculateProjectSummary(DateTime day)
  {
    var workDay = _monthWorkDays.FirstOrDefault(w => w.Date.Date == day.Date);
    if (workDay == null)
      return Enumerable.Empty<(string, double)>();

    return workDay.TimeEntries
      .GroupBy(wi => wi.Project?.Name ?? "Okänt projekt")
      .Select(g => (projectName: g.Key, hours: g.Sum(wi => wi.HoursWorked)));
  }

  // Public method to force refresh
  public async Task RefreshDataAsync()
  {
    await LoadMonthDataAsync();
  }
}
