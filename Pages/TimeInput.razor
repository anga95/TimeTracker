@page "/timeInput"
@using System.Security.Claims
@using TimeTracker.Models
@using TimeTracker.Services
@inject ITimeTrackingService TimeService
@inject AuthenticationStateProvider AuthProvider
@inject IJSRuntime JSRuntime

<div class="card shadow-sm mb-4">
    <div class="card-body">
        <h3 class="card-title mb-4">Tidrapportering</h3>

        <!-- Skapa projekt‑knapp ------------------------------------------------>
        <button class="btn btn-outline-secondary mb-4" @onclick="OpenProjectModal">
            <i class="bi bi-plus-circle"></i> Skapa nytt projekt
        </button>

        @if (showProjectModal)
        {
            <!-- Bootstrap‑modal -->
            <div class="modal fade show" style="display:block;" tabindex="-1" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Skapa nytt projekt</h5>
                            <button type="button" class="btn-close" @onclick="CloseProjectModal"></button>
                        </div>
                        <div class="modal-body">
                            <InputText @bind-Value="newProjectName"
                                       class="form-control"
                                       placeholder="Projektnamn" />
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-secondary" @onclick="CloseProjectModal">Avbryt</button>
                            <button class="btn btn-primary" @onclick="CreateProject">Skapa</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-backdrop fade show"></div>
        }

        <!-- Formulär ----------------------------------------------------------->
        <EditForm Model="@newWorkItem" OnValidSubmit="@HandleValidSubmit">
            <fieldset disabled="@string.IsNullOrEmpty(currentUserId)">
                <div class="row gy-3 gx-4">

                    <div class="col-12 col-md-4">
                        <label class="form-label">Projekt</label>
                        <select class="form-select" @bind="newWorkItem.ProjectId">
                            <option value="0">-- Välj projekt --</option>
                            @if (projects is not null)
                            {
                                @foreach (var p in projects)
                                {
                                    <option value="@p.Id">@p.Name</option>
                                }
                            }
                        </select>
                    </div>

                    <div class="col-6 col-md-3">
                        <label class="form-label">Datum</label>
                        <InputDate @bind-Value="newWorkItem.WorkDate" class="form-control" />
                    </div>

                    <div class="col-6 col-md-2">
                        <label class="form-label">Timmar</label>
                        <InputNumber @bind-Value="newWorkItem.HoursWorked" class="form-control" />
                    </div>

                    <div class="col-12 col-md-3">
                        <label class="form-label">Kommentar</label>
                        <InputTextArea @bind-Value="newWorkItem.Comment"
                                       class="form-control" rows="1" />
                    </div>

                    <div class="col-12 col-md-2 text-end">
                        <button type="submit"
                                class="btn btn-primary w-100 w-md-auto">
                            Lägg till
                        </button>
                    </div>
                </div>
            </fieldset>

            @if (string.IsNullOrEmpty(currentUserId))
            {
                <div class="alert alert-warning mt-3">
                    För att spara din tidrapportering måste du vara inloggad.
                </div>
            }
        </EditForm>
    </div>
</div>

<!-- --------------------------------------------------------------------- -->
<!-- Lista av dagar ------------------------------------------------------- -->
@if (workDays is not null && workDays.Any())
{
    @foreach (var day in workDays)
    {
        <h4 class="mt-4">
            @day.Date.ToString("dd MMM yyyy") (Summa: @GetRoundedTotal(day) h)
        </h4>

        <ul class="list-unstyled ms-2 mb-2">
            @foreach (var (proj,h) in GetProjectSummary(day))
            {
                <li><i class="bi bi-dot"></i> <strong>@proj</strong>: @h h</li>
            }
        </ul>

        <div class="table-responsive">
            <table class="table align-middle">
                <thead class="table-light">
                    <tr>
                        <th>Projekt</th>
                        <th style="width:8rem">Timmar</th>
                        <th>Kommentar</th>
                        <th style="width:1%"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in day.WorkItems)
                    {
                        <tr>
                            <td>@item.Project?.Name</td>
                            <td>@item.HoursWorked</td>
                            <td>@item.Comment</td>
                            <td class="text-end">
                                <button class="btn btn-outline-danger btn-sm"
                                        title="Ta bort"
                                        @onclick="() => ConfirmDelete(item.Id)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}
else
{
    <p>Inga tidrapporterade dagar ännu.</p>
}

@code {
    // ---------- state ----------------------------------------------------
    private bool showProjectModal;
    private string newProjectName = string.Empty;
    private string currentUserId = string.Empty;

    private WorkItem newWorkItem = new() { WorkDate = DateTime.Today };
    private List<WorkDay>? workDays;
    private List<Project>? projects;

    // ---------- lifecycle ------------------------------------------------
    protected override async Task OnInitializedAsync()
    {
        var state = await AuthProvider.GetAuthenticationStateAsync();
        currentUserId = state.User.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? string.Empty;

        projects = await TimeService.GetProjectsAsync(currentUserId);
        workDays = await TimeService.GetWorkDaysAsync(currentUserId);
    }

    // ---------- UI actions ----------------------------------------------
    void OpenProjectModal() => showProjectModal = true;
    void CloseProjectModal() { showProjectModal = false; newProjectName = string.Empty; }

    async Task CreateProject()
    {
        if (!string.IsNullOrWhiteSpace(newProjectName))
        {
            await TimeService.CreateProjectAsync(newProjectName, currentUserId);
            projects = await TimeService.GetProjectsAsync(currentUserId);
            CloseProjectModal();
        }
    }

    async Task HandleValidSubmit()
    {
        if (newWorkItem.ProjectId == 0) return;

        await TimeService.AddWorkItemAsync(newWorkItem, currentUserId);
        workDays = await TimeService.GetWorkDaysAsync(currentUserId);
        newWorkItem = new() { WorkDate = DateTime.Today };
    }

    async Task ConfirmDelete(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Är du säker?"))
        {
            await TimeService.DeleteWorkItemAsync(id);
            workDays = await TimeService.GetWorkDaysAsync(currentUserId);
        }
    }

    // ---------- helpers --------------------------------------------------
    static IEnumerable<(string, double)> GetProjectSummary(WorkDay d) =>
        d.WorkItems.GroupBy(w => w.Project?.Name ?? "Okänt")
                   .Select(g => (g.Key, g.Sum(w => w.HoursWorked)));

    static double GetRoundedTotal(WorkDay d) =>
        Math.Ceiling(d.WorkItems.Sum(w => w.HoursWorked) * 2) / 2;
}
