@page "/aisummary"
@using System.Security.Claims
@using System.Text
@using Markdig
@using TimeTracker.Models
@using TimeTracker.Services
@inject ITimeTrackingService TimeService
@inject IAiService AiService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime Js
@inject ILogger<AISummary> Logger
@inject AiSummaryStateService SummaryStateService


<div class="card mb-4">
    <div class="card-body">
        @if (!string.IsNullOrWhiteSpace(_aiSummary))
        {
            <div class="card shadow-sm">
                <div class="card-body">
                    @((MarkupString)Markdown.ToHtml(_aiSummary))
                </div>
            </div>
        }


        <h3 class="card-title">AI-sammanfattning för de senaste 7 dagarna</h3>
        <button class="btn btn-primary mb-3" @onclick="GenerateAiSummary" disabled="@_isLoading">
            @if (_isLoading)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <text>Genererar…</text>
            }
            else
            {
                <text>Generera AI-sammanfattning</text>
            }
        </button>

        @if (string.IsNullOrWhiteSpace(_aiSummary))
        {
            <p>Klicka på knappen för att generera en sammanfattning.</p>
        }
        else
        {
            <div class="alert alert-info">
                @((MarkupString)Markdown.ToHtml(_aiSummary))
            </div>
        }
    </div>
</div>

@code {
    private string _aiSummary = "";
    private string _warningMessage = "";
    private string _currentUserId = "";

    private bool _isLoading = false;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            _currentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "";
            
            if (string.IsNullOrWhiteSpace(SummaryStateService.AiSummary))
            {
                // Om inget finns i state, hämta från databas
                _aiSummary = await AiService.GetCachedSummaryAsync(_currentUserId) ?? "";
                SummaryStateService.SetAiSummary(_aiSummary);
            }
            else
            {
                // Annars använd state
                _aiSummary = SummaryStateService.AiSummary;
            }
        }
    }

    private async Task GenerateAiSummary()
    {
        _isLoading = true;
        StateHasChanged();

        // Hämta alla tidrapporterade dagar för aktuell användare
        var allDays = await TimeService.GetWorkDaysAsync(_currentUserId);

        // Filtrera ut de dagar som är inom de senaste 7 dagarna
        DateTime cutoff = DateTime.Today.AddDays(-7);
        var last7Days = allDays.Where(d => d.Date.Date >= cutoff)
                               .OrderBy(d => d.Date)
                               .ToList();

        if (!last7Days.Any())
        {
            await InvokeAsync(() =>
            {
                _aiSummary = "Inga tidrapporter för de senaste 7 dagarna.";
                SummaryStateService.SetAiSummary(_aiSummary);
                AiService.SaveOrUpdateSummaryAsync(_currentUserId, _aiSummary);
                _isLoading = false;
                StateHasChanged();
            });
            return;
        }

        // Bygg en prompt baserat på de hämtade dagarna
        string prompt = BuildPrompt(last7Days);

        try
        {
            ChatResponseResult response = await AiService.GetChatResponseAsync(prompt);

            if (response.IsRateLimited)
            {
                _warningMessage = response.Summary;
            }
            else
            {
                _aiSummary = response.Summary;
                SummaryStateService.SetAiSummary(_aiSummary);
                await AiService.SaveOrUpdateSummaryAsync(_currentUserId, _aiSummary);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Ett fel inträffade vid anropet till AI-tjänsten.");
            _warningMessage = "Ett fel inträffade vid anropet till AI-tjänsten.";
        }

        _isLoading = false;
        await InvokeAsync(StateHasChanged);

        var (monthlyCalls, maxCalls) = await AiService.GetUsageInfoAsync();
        await Js.InvokeVoidAsync("console.log", $"AI calls this month: {monthlyCalls}/{maxCalls}");
    }

    private string BuildPrompt(List<WorkDay> days)
    {
        var promptBuilder = new StringBuilder();
        promptBuilder.AppendLine("Sammanfatta de senaste 7 dagarnas tidrapporter. Inkludera projektnamn, antal timmar och eventuella kommentarer.");
        promptBuilder.AppendLine();

        foreach (var day in days)
        {
            promptBuilder.AppendLine($"Datum: {day.Date:yyyy-MM-dd}");

            var projectGroups = day.WorkItems
                .GroupBy(wi => wi.Project?.Name ?? "Okänt projekt");

            foreach (var group in projectGroups)
            {
                var projectName = group.Key;
                var totalHours = group.Sum(wi => wi.HoursWorked);
                var comments = group
                    .Where(wi => !string.IsNullOrWhiteSpace(wi.Comment))
                    .Select(wi => wi.Comment!.Trim())
                    .Distinct()
                    .ToList();

                promptBuilder.AppendLine();
                promptBuilder.AppendLine($"Projekt: {projectName}");
                promptBuilder.AppendLine($"Tid: {totalHours} timmar");
                if (comments.Any())
                {
                    promptBuilder.AppendLine("Kommentarer: " + string.Join("; ", comments));
                }
            }

            promptBuilder.AppendLine(); // tom rad mellan dagar
        }
        return promptBuilder.ToString();
    }
}
