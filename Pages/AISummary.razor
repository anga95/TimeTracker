@page "/aisummary"
@using System.Security.Claims
@using System.Text
@using Markdig
@using TimeTracker.Models
@using TimeTracker.Services
@inject ITimeTrackingService TimeService
@inject IAIService AIService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS
@inject ILogger<AISummary> Logger
@inject AISummaryStateService SummaryStateService


<div class="card mb-4">
    <div class="card-body">
        @if (!string.IsNullOrWhiteSpace(warningMessage))
        {
            <div class="alert alert-warning">
                <strong>Varning:</strong> @warningMessage
            </div>
        }

        <h3 class="card-title">AI-sammanfattning för de senaste 7 dagarna</h3>
        <button class="btn btn-primary mb-3" @onclick="GenerateAISummary" disabled="@isLoading">
            @if (isLoading)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <text>Genererar…</text>
            }
            else
            {
                <text>Generera AI-sammanfattning</text>
            }
        </button>

        @if (string.IsNullOrWhiteSpace(aiSummary))
        {
            <p>Klicka på knappen för att generera en sammanfattning.</p>
        }
        else
        {
            <div class="alert alert-info">
                <strong>Sammanfattning:</strong>
                @((MarkupString)Markdown.ToHtml(aiSummary))
            </div>
        }
    </div>
</div>

@code {
    private string aiSummary = "";
    private string warningMessage = "";
    private string currentUserId = "";

    private bool isLoading = false;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            currentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "";
            
            if (string.IsNullOrWhiteSpace(SummaryStateService.AISummary))
            {
                // Om inget finns i state, hämta från databas
                aiSummary = await AIService.GetCachedSummaryAsync(currentUserId) ?? "";
                SummaryStateService.SetAISummary(aiSummary);
            }
            else
            {
                // Annars använd state
                aiSummary = SummaryStateService.AISummary;
            }
        }
    }

    private async Task GenerateAISummary()
    {
        isLoading = true;
        StateHasChanged();

        // Hämta alla tidrapporterade dagar för aktuell användare
        var allDays = await TimeService.GetWorkDaysAsync(currentUserId);

        // Filtrera ut de dagar som är inom de senaste 7 dagarna
        DateTime cutoff = DateTime.Today.AddDays(-7);
        var last7Days = allDays.Where(d => d.Date.Date >= cutoff)
                               .OrderBy(d => d.Date)
                               .ToList();

        if (!last7Days.Any())
        {
            await InvokeAsync(() =>
            {
                aiSummary = "Inga tidrapporter för de senaste 7 dagarna.";
                SummaryStateService.SetAISummary(aiSummary);
                AIService.SaveOrUpdateSummaryAsync(currentUserId, aiSummary);
                isLoading = false;
                StateHasChanged();
            });
            return;
        }

        // Bygg en prompt baserat på de hämtade dagarna
        string prompt = BuildPrompt(last7Days);

        try
        {
            ChatResponseResult response = await AIService.GetChatResponseAsync(prompt);

            if (response.IsRateLimited)
            {
                warningMessage = response.Summary;
            }
            else
            {
                aiSummary = response.Summary;
                SummaryStateService.SetAISummary(aiSummary);
                await AIService.SaveOrUpdateSummaryAsync(currentUserId, aiSummary);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Ett fel inträffade vid anropet till AI-tjänsten.");
            warningMessage = "Ett fel inträffade vid anropet till AI-tjänsten.";
        }

        isLoading = false;
        await InvokeAsync(StateHasChanged);

        var (monthlyCalls, maxCalls) = await AIService.GetUsageInfoAsync();
        await JS.InvokeVoidAsync("console.log", $"AI calls this month: {monthlyCalls}/{maxCalls}");
    }

    private string BuildPrompt(List<WorkDay> days)
    {
        var promptBuilder = new StringBuilder();
        promptBuilder.AppendLine("Sammanfatta de senaste 7 dagarnas tidrapporter. Inkludera projektnamn, antal timmar och eventuella kommentarer.");
        promptBuilder.AppendLine();

        foreach (var day in days)
        {
            promptBuilder.AppendLine($"Datum: {day.Date.ToShortDateString()}.");

            // Gruppera workitems per projekt
            var groups = day.WorkItems
                            .GroupBy(wi => wi.Project?.Name ?? "Okänt projekt")
                            .Select(g => new { ProjectName = g.Key, Hours = g.Sum(wi => wi.HoursWorked) });
            foreach (var group in groups)
            {
                promptBuilder.AppendLine($"Projekt: {group.ProjectName}, {group.Hours} timmar.");
            }

            // Lista unika kommentarer
            var comments = day.WorkItems
                              .Where(wi => !string.IsNullOrWhiteSpace(wi.Comment))
                              .Select(wi => wi.Comment)
                              .Distinct();
            if (comments.Any())
            {
                promptBuilder.AppendLine("Kommentarer: " + string.Join("; ", comments));
            }
            promptBuilder.AppendLine(); // tom rad mellan dagarna
        }
        return promptBuilder.ToString();
    }
}
