@using TimeTracker.Models
@using Microsoft.AspNetCore.Components.Forms

@if (_editContext != null)
{
  <EditForm EditContext="_editContext" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger mb-3" />

    <div class="row gy-3 gx-4 align-items-end">
      <div class="col-md-4">
        <label>Projekt</label>
        <ProjectSelector
          Projects="Projects ?? new List<Project>()"
          @bind-SelectedProjectId="WorkItem.ProjectId"
          OnProjectChanged="OnProjectsChanged" />
        <ValidationMessage For="@(() => WorkItem.ProjectId)" />
      </div>

      <div class="col-md-2">
        <label>Timmar</label>
        <InputNumber @bind-Value="WorkItem.HoursWorked"
                     class="form-control"
                     disabled="@(!IsAuthenticated)" />
        <ValidationMessage For="@(() => WorkItem.HoursWorked)" />
      </div>

      <div class="col-md-4">
        <label>Kommentar</label>
        <InputTextArea @bind-Value="WorkItem.Comment"
                       rows="1"
                       class="form-control"
                       disabled="@(!IsAuthenticated)" />
      </div>

      <div class="col-md-2 text-end">
        <button type="submit"
                class="btn btn-primary"
                disabled="@(!IsAuthenticated)">
          Lägg till
        </button>
      </div>
    </div>
  </EditForm>
}

<hr />

@if (Items?.Any() ?? false)
{
  <div class="table-responsive">
    <table class="table">
      <thead class="table-light">
        <tr><th>Projekt</th><th>Timmar</th><th>Kommentar</th><th></th></tr>
      </thead>
      <tbody>
        @foreach (var item in Items)
        {
          <tr>
            <td>@item.Project?.Name</td>
            <td>@item.HoursWorked</td>
            <td>@item.Comment</td>
            <td class="text-end">
              <button class="btn btn-outline-danger btn-sm"
                      @onclick="() => OnDelete.InvokeAsync(item.Id)"
                      disabled="@(!IsAuthenticated)">
                <i class="bi bi-trash"></i>
              </button>
            </td>
          </tr>
        }
      </tbody>
    </table>
  </div>
}
else
{
  <p>Inga tids­poster för denna dag.</p>
}

@code {
  private EditContext? _editContext;

  [Parameter] public DateTime Day { get; set; }
  [Parameter] public List<WorkItem>? Items { get; set; }
  [Parameter] public List<Project>? Projects { get; set; }
  [Parameter] public bool IsAuthenticated { get; set; }

  [Parameter] public WorkItem WorkItem { get; set; } = new WorkItem();
  [Parameter] public EventCallback<WorkItem> WorkItemChanged { get; set; }

  [Parameter] public EventCallback<WorkItem> OnAdd { get; set; }
  [Parameter] public EventCallback<int> OnDelete { get; set; }
  [Parameter] public EventCallback OnProjectsChanged { get; set; }

  protected override void OnInitialized()
  {
      if (WorkItem == null)
      {
          WorkItem = new WorkItem { WorkDate = Day };
      }
      
      _editContext = new EditContext(WorkItem);
  }

  protected override void OnParametersSet()
  {
      // Always ensure WorkItem exists and has the correct date
      if (WorkItem == null)
      {
          WorkItem = new WorkItem { WorkDate = Day };
          WorkItemChanged.InvokeAsync(WorkItem);
      }
      else
      {
          WorkItem.WorkDate = Day;
      }
      
      // Re-create the EditContext if model changed
      if (_editContext == null || _editContext.Model != WorkItem)
      {
          _editContext = new EditContext(WorkItem);
      }
  }

  private async Task HandleValidSubmit()
  {
      if (WorkItem.ProjectId == 0) return;
      
      // Create a clone to avoid the reference getting cleared after submission
      var workItemToSubmit = new WorkItem
      {
          WorkDate = WorkItem.WorkDate,
          ProjectId = WorkItem.ProjectId,
          HoursWorked = WorkItem.HoursWorked,
          Comment = WorkItem.Comment
      };
      
      // Submit the work item
      await OnAdd.InvokeAsync(workItemToSubmit);
      
      // Reset fields
      WorkItem.ProjectId = 0;
      WorkItem.HoursWorked = 0;
      WorkItem.Comment = null;
      
      // Notify parent component
      await WorkItemChanged.InvokeAsync(WorkItem);
  }
}