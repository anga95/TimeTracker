@using TimeTracker.Models
@using Microsoft.AspNetCore.Components
@inject IJSRuntime JSRuntime

<div class="input-group">
<select class="form-select"
        value="@SelectedProjectId"
        @onchange="OnSelectionChanged">
  <option value="0">-- Välj projekt --</option>
  @foreach (var p in Projects)
  {
    <option value="@p.Id">@p.Name</option>
  }
</select>

  <button class="btn btn-outline-secondary"
          type="button"
          @onclick="() => _showModal = true">
    <i class="bi bi-plus-circle"></i>
  </button>

  <button class="btn btn-outline-danger"
          type="button"
          disabled="@(SelectedProjectId == 0)"
          @onclick="ConfirmDelete">
    <i class="bi bi-trash"></i>
  </button>
</div>

@if (_showModal)
{
  <div class="modal fade show" style="display:block;">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Skapa nytt projekt</h5>
          <button type="button" class="btn-close"
                  @onclick="CloseModal"></button>
        </div>
        <div class="modal-body">
          <InputText @bind-Value="_newProjectName"
                     class="form-control"
                     placeholder="Projektnamn" />
        </div>
        <div class="modal-footer">
          <button class="btn btn-secondary"
                  @onclick="CloseModal">Avbryt</button>
          <button class="btn btn-primary"
                  @onclick="Create">Lägg till</button>
        </div>
      </div>
    </div>
  </div>
  <div class="modal-backdrop fade show"></div>
}

@code {
  [Parameter] public List<Project> Projects { get; set; } = new();

  [Parameter] public int SelectedProjectId { get; set; }
  [Parameter] public EventCallback<int> SelectedProjectIdChanged { get; set; }

  [Parameter] public EventCallback<string> OnCreateProject { get; set; }
  [Parameter] public EventCallback<int>    OnDeleteProject { get; set; }

  private bool _showModal;
  private string _newProjectName = string.Empty;

  async Task Create()
  {
    if (!string.IsNullOrWhiteSpace(_newProjectName))
    {
      await OnCreateProject.InvokeAsync(_newProjectName);
      _newProjectName = "";
      _showModal = false;
    }
  }

  void CloseModal()
  {
    _showModal = false;
    _newProjectName = "";
  }

  async Task ConfirmDelete()
  {
    if (await JSRuntime.InvokeAsync<bool>("confirm", "Radera projekt?"))
    {
      await OnDeleteProject.InvokeAsync(SelectedProjectId);
      await SelectedProjectIdChanged.InvokeAsync(0);
    }
  }

  private async Task OnSelectionChanged(ChangeEventArgs e)
  {
    if (int.TryParse(e.Value?.ToString(), out int newValue ))
    {
      SelectedProjectId = newValue;
      await SelectedProjectIdChanged.InvokeAsync(newValue);
    }
  }
}