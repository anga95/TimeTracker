@using TimeTracker.Models
@using Microsoft.AspNetCore.Components
@inject IJSRuntime JSRuntime

<div class="input-group">
  <!-- 1. Select för att välja befintligt projekt -->
  <select class="form-select"
          @bind="SelectedProjectId">
    <option value="0">-- Välj projekt --</option>
    @foreach (var p in Projects)
    {
      <option value="@p.Id">@p.Name</option>
    }
  </select>

  <!-- 2. Knapp för att skapa nytt projekt -->
  <button class="btn btn-outline-secondary"
          type="button"
          @onclick="() => _showModal = true">
    <i class="bi bi-plus-circle"></i>
  </button>

  <!-- 3. Knapp för att radera valt projekt -->
  <button class="btn btn-outline-danger"
          type="button"
          disabled="@(SelectedProjectId == 0)"
          @onclick="ConfirmDelete">
    <i class="bi bi-trash"></i>
  </button>
</div>

<!-- Modal för att lägga till projekt -->
@if (_showModal)
{
  <div class="modal fade show" style="display:block;">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Skapa nytt projekt</h5>
          <button type="button" class="btn-close"
                  @onclick="CloseModal"></button>
        </div>
        <div class="modal-body">
          <InputText @bind-Value="_newProjectName"
                     class="form-control"
                     placeholder="Projektnamn" />
        </div>
        <div class="modal-footer">
          <button class="btn btn-secondary"
                  @onclick="CloseModal">Avbryt</button>
          <button class="btn btn-primary"
                  @onclick="Create">Lägg till</button>
        </div>
      </div>
    </div>
  </div>
  <div class="modal-backdrop fade show"></div>
}

@code {
  [Parameter] public List<Project> Projects { get; set; } = new();

  // two-way bind för valt ProjectId
  [Parameter] public int SelectedProjectId { get; set; }
  [Parameter] public EventCallback<int> SelectedProjectIdChanged { get; set; }

  // callbacks för skapa och ta bort
  [Parameter] public EventCallback<string> OnCreateProject { get; set; }
  [Parameter] public EventCallback<int>    OnDeleteProject { get; set; }

  private bool _showModal;
  private string _newProjectName = string.Empty;

  async Task Create()
  {
    if (!string.IsNullOrWhiteSpace(_newProjectName))
    {
      await OnCreateProject.InvokeAsync(_newProjectName);
      _newProjectName = "";
      _showModal = false;
    }
  }

  void CloseModal()
  {
    _showModal = false;
    _newProjectName = "";
  }

  async Task ConfirmDelete()
  {
    // validera att användaren verkligen vill ta bort
    if (await JSRuntime.InvokeAsync<bool>("confirm", "Radera projekt?"))
    {
      await OnDeleteProject.InvokeAsync(SelectedProjectId);
      // nollställ valt om det raderats
      await SelectedProjectIdChanged.InvokeAsync(0);
    }
  }
}
