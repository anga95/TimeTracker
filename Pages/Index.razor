@page "/"
@using TimeTracker.Models
@using TimeTracker.Services
@inject ITimeTrackingService TimeService
@inject IJSRuntime JSRuntime



<!-- SEKTION FÖR ATT SKAPA NYTT PROJEKT -->
<div class="card mb-4">
    <div class="card-header">Skapa nytt projekt</div>
    <div class="card-body">
        <div class="input-group">
            <InputText @bind-Value="newProjectName" class="form-control" placeholder="Nytt projektnamn" />
            <button class="btn btn-success" @onclick="AddProject">Skapa projekt</button>
        </div>
    </div>
</div>


<h3>Tidrapportering</h3>

<!-- FORMULÄR FÖR TIDRAPPORTERING -->
<EditForm Model="@newWorkItem" OnValidSubmit="@HandleValidSubmit" class="mb-3">
    <div class="row g-3 align-items-end">
        <!-- Projekt (dropdown) -->
        <div class="col-md-3">
            <label class="form-label">Projekt</label>
            <select class="form-select" @bind="newWorkItem.ProjectId">
                <option value="0">-- Välj projekt --</option>
                @if (projects != null)
                {
                    @foreach (var p in projects)
                    {
                        <option value="@p.Id">@p.Name</option>
                    }
                }
            </select>
        </div>

        <!-- Datum -->
        <div class="col-md-3">
            <label class="form-label">Datum</label>
            <InputDate @bind-Value="newWorkItem.WorkDate" class="form-control" />
        </div>

        <!-- Timmar -->
        <div class="col-md-2">
            <label class="form-label">Timmar</label>
            <InputNumber @bind-Value="newWorkItem.HoursWorked" class="form-control" />
        </div>

        <!-- Kommentar -->
        <div class="col-md-4">
            <label class="form-label">Kommentar</label>
            <InputTextArea @bind-Value="newWorkItem.Comment" class="form-control" rows="1" />
        </div>

        <!-- Submit-knapp -->
        <div class="col-md-2">
            <button type="submit" class="btn btn-primary">Lägg till tid</button>
        </div>
    </div>
</EditForm>



<!-- LISTA AV TIDRAPPORTERADE DAGAR -->
@if (workDays != null && workDays.Any())
{
    @foreach (var day in workDays)
    {
        <h4>@day.Date.ToShortDateString() (Summa: @GetRoundedTotal(day) h)</h4>
        <table class="table table-striped table-hover table-bordered">
            <thead>
                <tr>
                    <th>Projekt</th>
                    <th>Timmar</th>
                    <th>Kommentar</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in day.WorkItems)
                {
                    <tr>
                        <td>@item.Project?.Name</td>
                        <td>@item.HoursWorked</td>
                        <td>@item.Comment</td>
                        <td>
                            <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(item.Id)">
                                Ta bort
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}
else
{
    <p>Inga tidrapporterade dagar ännu.</p>
}

@code {
    // Nya poster
    private WorkItem newWorkItem = new() { WorkDate = DateTime.Today };
    private string newProjectName = "";

    // Data för UI
    private List<WorkDay>? workDays;
    private List<Project>? projects;

    protected override async Task OnInitializedAsync()
    {
        projects = await TimeService.GetProjectsAsync();
        workDays = await TimeService.GetWorkDaysAsync();
    }

    private async Task HandleValidSubmit()
    {
        if (newWorkItem.ProjectId == 0)
        {
            // Ex: validera eller visa fel om inget projekt är valt
            return;
        }

        await TimeService.AddWorkItemAsync(newWorkItem);
        workDays = await TimeService.GetWorkDaysAsync();
        newWorkItem = new() { WorkDate = DateTime.Today };
    }

    private async Task AddProject()
    {
        if (!string.IsNullOrWhiteSpace(newProjectName))
        {
            await TimeService.CreateProjectAsync(newProjectName);
            projects = await TimeService.GetProjectsAsync();
            newProjectName = "";
        }
    }

    private double GetRoundedTotal(WorkDay day)
    {
        var total = day.WorkItems.Sum(wi => wi.HoursWorked);
        return Math.Ceiling(total * 2) / 2; // Avrunda till närmaste halvtimme
    }

    private async Task ConfirmDelete(int workItemId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>(
            "confirm",
            "Är du säker på att du vill ta bort denna tidpost?"
        );

        if (confirmed)
        {
            await TimeService.DeleteWorkItemAsync(workItemId);
            workDays = await TimeService.GetWorkDaysAsync();
        }
    }
}
