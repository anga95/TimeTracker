@page "/tracktime"
@page "/"
@using System.Security.Claims
@using TimeTracker.Models
@using TimeTracker.Services
@inject ITimeTrackingService TimeService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<div class="card mb-4">
    <div class="card-body">
        <h3 class="card-title">Tidrapportering</h3>
        <button class="btn btn-outline-secondary mb-3" @onclick="OpenProjectModal">
            Skapa nytt projekt
        </button>
        @if (_showProjectModal)
        {
            <div class="modal fade show" style="display:block;" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Skapa nytt projekt</h5>
                            <button type="button" class="btn-close" @onclick="CloseProjectModal"></button>
                        </div>
                        <div class="modal-body">
                            <InputText @bind-Value="_newProjectName" class="form-control" placeholder="Projektnamn" />
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-secondary" @onclick="CloseProjectModal">Avbryt</button>
                            <button class="btn btn-primary" @onclick="CreateProject">Skapa</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-backdrop fade show"></div>
        }

        <hr />

        <!-- Formulär för tidrapportering -->
        <EditForm Model="@_newWorkItem" OnValidSubmit="@HandleValidSubmit" class="mb-3">
            <fieldset disabled="@string.IsNullOrEmpty(_currentUserId)">
            <div class="row g-3 align-items-end">
                <!-- Projekt (dropdown) -->
                <div class="col-md-3">
                    <label class="form-label">Projekt</label>
                    <select class="form-select" @bind="_newWorkItem.ProjectId">
                        <option value="0">-- Välj projekt --</option>
                        @if (_projects != null)
                        {
                            @foreach (var p in _projects)
                            {
                                <option value="@p.Id">@p.Name</option>
                            }
                        }
                    </select>
                </div>

                <!-- Datum -->
                <div class="col-md-3">
                    <label class="form-label">Datum</label>
                    <InputDate @bind-Value="_newWorkItem.WorkDate" class="form-control" />
                </div>

                <!-- Timmar -->
                <div class="col-md-2">
                    <label class="form-label">Timmar</label>
                    <InputNumber @bind-Value="_newWorkItem.HoursWorked" class="form-control" />
                </div>

                <!-- Kommentar -->
                <div class="col-md-4">
                    <label class="form-label">Kommentar</label>
                    <InputTextArea @bind-Value="_newWorkItem.Comment" class="form-control" rows="1" />
                </div>

                <!-- Submit-knapp -->
                <div class="col-md-2">
                    <button type="submit" class="btn btn-primary">Lägg till tid</button>
                </div>
            </div>
            </fieldset>
            @if (string.IsNullOrEmpty(_currentUserId))
            {
                <div class="alert alert-warning mt-3">
                    För att spara din tidrapportering måste du vara inloggad.
                </div>
            }
        </EditForm>
    </div>
</div>

<div class="my-4">
    <hr />
</div>

<!-- Lista av tidrapporterade dagar -->
<div>
    @if (_workDays != null && _workDays.Any())
    {
        @foreach (var day in _workDays)
        {
            <h4>@day.Date.ToShortDateString() (Summa: @GetRoundedTotal(day) h)</h4>
            <ul>
                @foreach (var (projectName, hours) in GetProjectSummary(day))
                {
                    <li><b>@projectName</b>: @hours h</li>
                }
            </ul>
            <table class="table table-striped table-hover table-bordered">
                <thead>
                    <tr>
                        <th>Projekt</th>
                        <th>Timmar</th>
                        <th>Kommentar</th>
                        <th>Ta bort</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in day.WorkItems)
                    {
                        <tr>
                            <td>@item.Project?.Name</td>
                            <td>@item.HoursWorked</td>
                            <td>@item.Comment</td>
                            <td>
                                <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(item.Id)">
                                    Ta bort
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    }
    else
    {
        <p>Inga tidrapporterade dagar ännu.</p>
    }
</div>

@code {
    private bool _showProjectModal = false;
    private string _newProjectName = "";
    private string _currentUserId = "";

    private WorkItem _newWorkItem = new() { WorkDate = DateTime.Today };
    private List<WorkDay>? _workDays;
    private List<Project>? _projects;

    private List<Project> _demoProjects = new()
    {
        new Project { Id = 1, Name = "Demo Projekt 1" },
        new Project { Id = 2, Name = "Demo Projekt 2" }
    };

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (userId != null) _currentUserId = userId;

        _projects = await TimeService.GetProjectsAsync(_currentUserId);
        _workDays = await TimeService.GetWorkDaysAsync(_currentUserId);
        
    }

    private void OpenProjectModal() => _showProjectModal = true;

    private void CloseProjectModal()
    {
        _showProjectModal = false;
        _newProjectName = "";
    }

    private async Task CreateProject()
    {
        if (!string.IsNullOrWhiteSpace(_newProjectName))
        {
            await TimeService.CreateProjectAsync(_newProjectName, _currentUserId);
            _projects = await TimeService.GetProjectsAsync(_currentUserId);
            CloseProjectModal();
        }
    }

    private async Task HandleValidSubmit()
    {
        if (_newWorkItem.ProjectId == 0)
        {
            return;
        }

        await TimeService.AddWorkItemAsync(_newWorkItem, _currentUserId);
        _workDays = await TimeService.GetWorkDaysAsync(_currentUserId);
        _newWorkItem = new() { WorkDate = DateTime.Today };
    }

    private IEnumerable<(string ProjectName, double Hours)> GetProjectSummary(WorkDay day)
    {
        return day.WorkItems
            .GroupBy(wi => wi.Project?.Name ?? "Okänt projekt")
            .Select(g => (ProjectName: g.Key, Hours: g.Sum(wi => wi.HoursWorked)));
    }

    private double GetRoundedTotal(WorkDay day)
    {
        var total = day.WorkItems.Sum(wi => wi.HoursWorked);
        return Math.Ceiling(total * 2) / 2;
    }

    private async Task ConfirmDelete(int workItemId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>(
            "confirm",
            "Är du säker på att du vill ta bort denna tidpost?"
        );

        if (confirmed)
        {
            await TimeService.DeleteWorkItemAsync(workItemId);
            _workDays = await TimeService.GetWorkDaysAsync(_currentUserId);
        }
    }
}