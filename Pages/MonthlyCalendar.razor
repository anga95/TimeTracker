@page "/monthly"
@using TimeTracker.Models
@using TimeTracker.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject ITimeTrackingService TimeService
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3 class="mb-3">Månadsöversikt</h3>

<div class="mb-2 d-flex justify-content-center align-items-center">
    <button class="btn btn-secondary me-3" @onclick="PrevMonth">« Föregående</button>
    <h4 class="m-0">@currentMonthName @currentYear</h4>
    <button class="btn btn-secondary ms-3" @onclick="NextMonth">Nästa »</button>
</div>

<!-- Rubriker för veckodagar -->
<div class="row text-center fw-bold">
    @foreach (var dayName in weekdayHeaders)
    {
        <div class="col border">
            @dayName
        </div>
    }
</div>

<!-- Månadsgrid -->
@for (int row = 0; row < totalRows; row++)
{
    <div class="row">
        @for (int col = 0; col < 7; col++)
        {
            var day = gridStart.AddDays(row * 7 + col);
            // Om dagen ligger inom aktuell månad
            bool inThisMonth = (day.Month == currentMonth && day.Year == currentYear);
            // Kontrollera om det är en vardag (mån–fre)
            bool isWeekday = (day.DayOfWeek != DayOfWeek.Saturday && day.DayOfWeek != DayOfWeek.Sunday);
            // Markera dagen med grön bakgrund om det är en vardag och timmarna är exakt 8
            string backgroundColor = inThisMonth
            ? ((isWeekday && GetTotalHours(day) >= 8) ? "#e0ffe0" : "white")
            : "#f8f9fa";

            <div class="col border p-2"
                 style="height: 120px; cursor: pointer; background-color:@backgroundColor"
                 @onclick="() => OpenDayModal(day)">
                <strong>@day.Day</strong>
                <br />
                <small>
                    @GetTotalHours(day)h
                    @(string.IsNullOrEmpty(GetProjectName(day)) ? "" : $", {GetProjectName(day)}")
                </small>
            </div>
        }
    </div>
}

<!-- Modal för detaljerad vy av en dag -->
@if (showDayModal)
{
    <div class="modal fade show" style="display:block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@selectedDay.ToLongDateString()</h5>
                    <button type="button" class="btn-close" @onclick="CloseDayModal"></button>
                </div>
                <div class="modal-body">
                    @if (dayWorkItems != null && dayWorkItems.Any())
                    {
                        <ul>
                            @foreach (var item in dayWorkItems)
                            {
                                <li>@item.Project?.Name: @item.HoursWorked h - @item.Comment</li>
                            }
                        </ul>
                        <p><strong>Total:</strong> @dayWorkItems.Sum(i => i.HoursWorked) h</p>
                    }
                    else
                    {
                        <p>Inga poster denna dag</p>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseDayModal">Stäng</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private string currentUserId = "";

    private List<WorkDay> userWorkDays = new();

    private int currentYear;
    private int currentMonth;
    private string currentMonthName => System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(currentMonth);

    private DateTime gridStart; // Första datum i griden (kan vara t.ex. 27:e förra månaden)
    private int totalRows;

    private bool showDayModal = false;
    private DateTime selectedDay;
    private List<WorkItem>? dayWorkItems;

    private readonly string[] weekdayHeaders = new[] { "Mån", "Tis", "Ons", "Tors", "Fre", "Lör", "Sön" };

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            currentUserId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "";
        }
        else
        {
            currentUserId = "";
        }

        var now = DateTime.Today;
        currentYear = now.Year;
        currentMonth = now.Month;

        await LoadData();
    }

    private async Task LoadData()
    {
        var allDays = await TimeService.GetWorkDaysAsync(currentUserId);

        // Filtrera ut de WorkDays som ligger i den valda månaden
        userWorkDays = allDays
            .Where(d => d.Date.Year == currentYear && d.Date.Month == currentMonth)
            .ToList();

        // Beräkna gridens startdatum (för att fylla ut en hel månadsvy)
        var firstOfMonth = new DateTime(currentYear, currentMonth, 1);
        // Dag i veckan (måndag = 1, tisdag = 2, ..., söndag = 7)
        int dayOfWeek = (int)firstOfMonth.DayOfWeek; // Söndag = 0, Måndag = 1, etc.
        if (dayOfWeek == 0)
        {
            // Om det är söndag, sätt dayOfWeek = 7.
            dayOfWeek = 7;
        }

        var offset = dayOfWeek - 1; // hur många dagar innan 1:a som vi backar
        gridStart = firstOfMonth.AddDays(-offset);

        var daysInMonth = DateTime.DaysInMonth(currentYear, currentMonth);
        var totalCells = offset + daysInMonth; // ex: offset=3 + 30 dagar => 33 celler
        totalRows = (int)Math.Ceiling(totalCells / 7.0); // ex: 33/7 => 5 rader
    }

    private double GetTotalHours(DateTime day)
    {
        var wd = userWorkDays.FirstOrDefault(d => d.Date.Date == day.Date);
        if (wd == null) return 0;
        return wd.WorkItems.Sum(i => i.HoursWorked);
    }

    // Hämtar och trunkerar (vid behov) projektnamnet från det första arbetsuppdraget för dagen.
    private string GetProjectName(DateTime day)
    {
        var wd = userWorkDays.FirstOrDefault(d => d.Date.Date == day.Date);
        if (wd == null || wd.WorkItems == null || !wd.WorkItems.Any())
            return "";
        var projectName = wd.WorkItems.First().Project?.Name;
        if (string.IsNullOrEmpty(projectName))
            return "";
        return projectName;
    }


    private void OpenDayModal(DateTime day)
    {
        selectedDay = day;
        var wd = userWorkDays.FirstOrDefault(d => d.Date.Date == day.Date);
        dayWorkItems = wd?.WorkItems ?? new List<WorkItem>();
        showDayModal = true;
    }

    private void CloseDayModal()
    {
        showDayModal = false;
        selectedDay = DateTime.MinValue;
        dayWorkItems = null;
    }

    private async Task PrevMonth()
    {
        if (currentMonth == 1)
        {
            currentMonth = 12;
            currentYear--;
        }
        else
        {
            currentMonth--;
        }
        await LoadData();
    }

    private async Task NextMonth()
    {
        if (currentMonth == 12)
        {
            currentMonth = 1;
            currentYear++;
        }
        else
        {
            currentMonth++;
        }
        await LoadData();
    }
}
