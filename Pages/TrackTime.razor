@page "/tracktime"
@using TimeTracker.Models
@using TimeTracker.Services
@inject ITimeTrackingService TimeService

<h3>Tidrapportering</h3>

<!-- Formulär för att lägga till WorkItem -->
<EditForm Model="@newWorkItem" OnValidSubmit="@HandleValidSubmit">
    <InputText @bind-Value="newWorkItem.ProjectName" placeholder="Projekt" />
    <InputNumber @bind-Value="newWorkItem.HoursWorked" placeholder="Arbetade timmar" />
    <InputTextArea @bind-Value="newWorkItem.Comment" placeholder="Kommentar (valfritt)" />
    <button type="submit">Lägg till tid</button>
</EditForm>

@if (workDays is not null)
{
    <h4>Tidrapporterade dagar</h4>
    @foreach (var day in workDays)
    {
        <p><b>@day.Date.ToShortDateString()</b> (Summa: @GetRoundedTotal(day) timmar)</p>
        <ul>
            @foreach (var item in day.WorkItems)
            {
                <li>
                    @item.ProjectName: @item.HoursWorked h
                    @if (!string.IsNullOrEmpty(item.Comment))
                    {
                        <span> - @item.Comment</span>
                    }
                </li>
            }
        </ul>
    }
}

@code {
    // Sätt defaultvärde till 0 timmar, eftersom det nu ska anges manuellt.
    private WorkItem newWorkItem = new() { HoursWorked = 0 };

    private List<WorkDay>? workDays;

    protected override async Task OnInitializedAsync()
    {
        workDays = await TimeService.GetWorkDaysAsync();
    }

    private async Task HandleValidSubmit()
    {
        await TimeService.AddWorkItemAsync(newWorkItem);
        workDays = await TimeService.GetWorkDaysAsync();

        newWorkItem = new() { HoursWorked = 0 };
    }

    private double GetRoundedTotal(WorkDay day)
    {
        // Om du vill avrunda till närmaste halvtimme:
        var total = day.WorkItems.Sum(wi => wi.HoursWorked);
        return Math.Ceiling(total * 2) / 2;
    }
}
